@model IEnumerable<GroupBoizDAL.Entities.SystemAccount>

@{
    ViewData["Title"] = "Account Management Page";
}

<section class="account-management">
    <div class="container">
        <h2 class="tm-margin-b-30">Quản lý Tài Khoản</h2>

        <!-- Bảng danh sách tài khoản -->
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Họ Tên</th>
                    <th>Email</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in Model)
                {
                    <tr>
                        <td>@user.AccountId</td>
                        <td>@user.AccountName</td>
                        <td>@user.AccountEmail</td>
                        <td>
                            <a href="/account/details/@user.AccountId" class="btn btn-info btn-sm">Xem Chi Tiết</a>
                            <button class="btn btn-warning btn-sm" onclick="openEditModal(@user.AccountId, '@user.AccountName', '@user.AccountEmail')">Sửa</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteAccount(@user.AccountId)">Xóa</button>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</section>

<!-- Modal cập nhật tài khoản -->
<div class="modal fade" id="editAccountModal" tabindex="-1" aria-labelledby="editAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAccountModalLabel">Chỉnh sửa tài khoản</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAccountForm">
                    <input type="hidden" id="editAccountId" name="AccountId" />

                    <div class="mb-3">
                        <label for="editAccountName" class="form-label">Họ Tên</label>
                        <input type="text" id="editAccountName" name="AccountName" class="form-control" required />
                    </div>

                    <div class="mb-3">
                        <label for="editAccountEmail" class="form-label">Email</label>
                        <input type="email" id="editAccountEmail" name="AccountEmail" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editAccountPassword" class="form-label">Mật khẩu</label>
                        <input type="password" id="editAccountPassword" name="AccountPassword" class="form-control" />
                    </div>


                    <button type="button" class="btn btn-primary" onclick="submitEditForm()">Cập nhật</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function openEditModal(id, name, email) {
        document.getElementById("editAccountId").value = id;
        document.getElementById("editAccountName").value = name;
        document.getElementById("editAccountEmail").value = email;
        var myModal = new bootstrap.Modal(document.getElementById("editAccountModal"));
        myModal.show();
    }

    async function submitEditForm() {
        const accountId = document.getElementById("editAccountId").value;
        const accountName = document.getElementById("editAccountName").value;
        const accountEmail = document.getElementById("editAccountEmail").value;
        const accountPassword = document.getElementById("editAccountPassword")?.value || "";

        const requestData = {
            AccountName: accountName,
            AccountEmail: accountEmail,
            AccountPassword: accountPassword
        };

        try {
            const response = await fetch(`/account/edit?id=${accountId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(requestData)
            });


            if (response.ok) {
                alert("Cập nhật thành công!");
                location.reload();
            } else {
                const errorMsg = await response.text();
                alert("Cập nhật thất bại: " + errorMsg);
            }
        } catch (error) {
            alert("Lỗi hệ thống: " + error.message);
        }
    }



</script>
<script>
    async function deleteAccount(accountId) {
        // if (!confirm("Bạn có chắc chắn muốn xóa tài khoản này không?")) {
        //     return;
        // }

        try {
            // Gửi yêu cầu DELETE đến API với đúng URL
            const response = await fetch(`/account/deleteaccount/${accountId}`, {
                method: "DELETE",  // Phương thức DELETE
                headers: {
                    "Content-Type": "application/json"
                }
            });

            if (response.ok) {
                const data = await response.json(); // Nhận dữ liệu trả về từ server
                alert(data.message);  // Hiển thị thông báo từ server
                location.reload();    // Tải lại trang để cập nhật danh sách tài khoản
            } else {
                const errorMsg = await response.text();
                alert("Xóa thất bại: " + errorMsg);
            }
        } catch (error) {
            alert("Lỗi hệ thống: " + error.message);
        }
    }



</script>



